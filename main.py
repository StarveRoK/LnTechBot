import asyncio
import logging
import os
import sys

from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.utils.markdown import hbold
from dotenv import load_dotenv

from app import keyboard, description, SQlite, pay, my_profile, admin, referal, oblaka, calculation

load_dotenv()
dp = Dispatcher()

SQlite.check_table() # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ë–î (–ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ - —Å–æ–∑–¥–∞–µ—Ç—Å—è)

'''========================================–û–¢–ö–õ–ò–ö–ò –ù–ê –ö–û–ú–ê–ù–î–´========================================'''

# –¢–æ —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start
@dp.message(CommandStart())
async def command_start_handler(message: Message):
    text = SQlite.add_new_user(message.from_user.id, message.from_user.full_name)
    await message.answer(text, reply_markup=keyboard.builder.as_markup(resize_keyboard=True))

#–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
@dp.message(Command("admin"))
async def admin_panel(message: Message):
    if str(message.from_user.id) in os.getenv("ADMIN_IDS"):
        text, reply_markup = admin.admin_panel(message.from_user.first_name)
        await message.answer(text, reply_markup=reply_markup)
    else: await message.reply("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è")

'''========================================–û–¢–ö–õ–ò–ö–ò –ù–ê –°–û–û–ë–©–ï–ù–ò–Ø========================================'''

# –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤
@dp.message(F.text == "üñ•VDS/VPS –°–µ—Ä–≤–µ—Ä–∞ –≤ –Ω–∞–ª–∏—á–∏–∏")
async def open_all_servers(message: types.Message):
    SQlite.add_new_user(message.from_user.id, message.from_user.first_name)
    await message.answer(description.set_1, reply_markup=keyboard.servers.as_markup())

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ
@dp.message(F.text == "üéÅ–ü—Ä–æ–º–æ–∫–æ–¥")
async def info_promocode(message: types.Message):
    await message.answer(description.set_2)

# –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(F.text == "üôç‚Äç‚ôÇÔ∏è–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def my_profile_(message: types.Message):
    text, reply_markup = my_profile.my_profile(message.from_user.id, message.from_user.first_name)
    await message.answer(text, reply_markup=reply_markup)

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏
@dp.message(F.text == "‚ÑπÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def information(message: types.Message):
    await message.answer(description.set_4)

# –ö–æ–Ω—Ç–∞–∫—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∏
@dp.message(F.text == "üìû–ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def contacts(message: types.Message):
    await message.answer(description.set_5, reply_markup=keyboard.technical_support.as_markup())

# –í—ã–∑—ã–≤–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç OBLAKA
@dp.message(F.text == "OBLAKA")
async def oblaka_(message: types.Message):
    text = oblaka.oblaka(message.from_user.id, message.from_user.first_name)
    await message.answer(text)

# –¢–æ —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –ª—é–±–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ —á–∞—Ç–µ –∏–ª–∏ –ø–æ–ø—ã—Ç–∫—É –≤–≤–µ—Å—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
@dp.message()
async def unexpected_message(message: types.Message):
    if "rf" in message.text: await message.answer(text=referal.is_referal_code(message.text, message.from_user.id))
    elif "sendto" in message.text:
        if str(message.from_user.id) in os.getenv("ADMIN_IDS"):
            text, user_id, text_to_user = admin.text_to_user(message.text)
            try:
                await bot.send_message(chat_id=user_id, text=text_to_user)
                await message.answer(text=text)
            except:
                text = description.error_send_message_to_user
                await message.answer(text=text)
        else: await message.reply("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è")
    else: await message.reply("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è")

'''========================================–û–¢–ö–õ–ò–ö–ò –ù–ê –ù–ê–ñ–ê–¢–ò–ï INLINE –ö–ù–û–ü–û–ö========================================'''

#–û—Ç–∫–ª–∏–∫ –Ω–∞ –∑–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É
@dp.callback_query(F.data.in_(keyboard.key_server_description))
async def callback_one_server(callback_query: types.callback_query):
    text, reply_markup = calculation.information_about_server(callback_query.data, callback_query.from_user.id)
    await callback_query.message.edit_text(text=text, reply_markup=reply_markup)


#–û—Ç–∫–ª–∏–∫ –Ω–∞ –ö–£–ü–ò–¢–¨ –∏–ª–∏ –ù–∞–∑–∞–¥
@dp.callback_query(F.data.in_(keyboard.buy_))
async def callback_bue_or_back(callback_query: types.callback_query):
    text, reply_markup = calculation.buy_or_back(callback_query.data, callback_query.from_user.id)
    await callback_query.message.edit_text(text=text, reply_markup=reply_markup)

#–í–≤–æ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
@dp.callback_query(F.data.in_("input_referal"))
async def callback_referal_code(callback_query: types.callback_query):
    text, reply_markup = description.input_referal, keyboard.back_to_my_profile.as_markup()
    await callback_query.message.edit_text(text=text, reply_markup=reply_markup)

# –ö–û–î –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –û–ü–õ–ê–¢–´!!!
@dp.callback_query(F.data.in_("buy"))
async def callback_check_pay_(callback_query: types.callback_query):
    text, reply_markup, is_pay, text_to_admin = pay.check_pay(callback_query.from_user.id, callback_query.from_user.first_name, callback_query.from_user.username)
    if is_pay:
        await bot.send_message(int(os.getenv("MAX_ADMIN")), text=text_to_admin)
        await callback_query.message.edit_text(text=text, reply_markup=reply_markup)
    else:
        try: await callback_query.message.edit_text(text=text, reply_markup=reply_markup)
        except: pass


#–û—Ç–∫–ª–∏–∫ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ callback –∫–Ω–æ–ø–æ–∫–∏ "–ù–∞–∑–∞–¥" –≤ "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
@dp.callback_query(F.data.in_("back_to_my_profile"))
async def callback_back_to_my_profile(callback_query: types.callback_query):
    text, reply_markup = my_profile.back_to_my_profile(callback_query.from_user.id, callback_query.from_user.first_name)
    await callback_query.message.edit_text(text=text, reply_markup=reply_markup)


#–û—Ç–∫–ª–∏–∫ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ callback –∫–Ω–æ–ø–æ–∫–∏ "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞" –≤ "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
@dp.callback_query(F.data.in_("referal_system"))
async def callback_referal_system(callback_query: types.callback_query):
    text, rep_markup = description.referal + f"\n\n–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: rf{hbold(callback_query.from_user.id)}", keyboard.input_referal.as_markup()
    await callback_query.message.edit_text(text=text, reply_markup=rep_markup)


#–û—Ç–∫–ª–∏–∫ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ callback –∫–Ω–æ–ø–æ–∫–∏ "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫—É–ø–æ–Ω" –≤ "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
@dp.callback_query(F.data.in_("coupon"))
async def callback_activate_coupon(callback_query: types.callback_query):
    text, rep_markup = description.set_3, keyboard.back_to_my_profile.as_markup()
    await callback_query.message.edit_text(text=text, reply_markup=rep_markup)


#–û—Ç–∫–ª–∏–∫ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ admin –∫–Ω–æ–ø–æ–∫
@dp.callback_query(F.data.in_(["db_to_chat"]))
async def callback_admin_button(callback_query: types.callback_query):
    if callback_query.data == "db_to_chat": await callback_query.message.edit_text(text=admin.db_into_message())


#–û—Ç–∫–ª–∏–∫ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback –∫–Ω–æ–ø–æ–∫
@dp.callback_query()
async def callback_unexpected_inline_button(callback_query: types.callback_query):
    text, rep_markup = description.error, keyboard.back_to_my_profile.as_markup()
    await callback_query.message.edit_text(text=text, reply_markup=rep_markup)

'''========================================–ó–ê–ü–£–°–ö –ë–û–¢–ê========================================'''

# –ó–∞–ø—É—Å–∫ —ç—Ç–æ–π –º–∞—à–∏–Ω—ã
async def main():
    global bot
    # bot = Bot(os.getenv("TOKEN"), parse_mode=ParseMode.HTML)
    bot = Bot(os.getenv("TOKEN"), default=DefaultBotProperties(parse_mode='HTML'))
    # await bot.send_message(472863495, text="Hello")
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())